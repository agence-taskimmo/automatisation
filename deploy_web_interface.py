#!/usr/bin/env python3
"""
Script de d√©ploiement pour l'interface web d'automatisation
Configure et d√©ploie l'interface web sur un serveur
"""

import os
import sys
import subprocess
import argparse
import json
import time
from pathlib import Path
import shutil

def check_python_version():
    """V√©rifie la version de Python"""
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ requis")
        sys.exit(1)
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} d√©tect√©")

def check_dependencies():
    """V√©rifie et installe les d√©pendances"""
    print("üîç V√©rification des d√©pendances...")
    
    try:
        import flask
        print("‚úÖ Flask install√©")
    except ImportError:
        print("üì¶ Installation de Flask...")
        subprocess.run([sys.executable, "-m", "pip", "install", "flask"], check=True)
    
    try:
        import flask_socketio
        print("‚úÖ Flask-SocketIO install√©")
    except ImportError:
        print("üì¶ Installation de Flask-SocketIO...")
        subprocess.run([sys.executable, "-m", "pip", "install", "flask-socketio"], check=True)
    
    try:
        import schedule
        print("‚úÖ Schedule install√©")
    except ImportError:
        print("üì¶ Installation de Schedule...")
        subprocess.run([sys.executable, "-m", "pip", "install", "schedule"], check=True)

def create_directories():
    """Cr√©e les r√©pertoires n√©cessaires"""
    print("üìÅ Cr√©ation des r√©pertoires...")
    
    directories = [
        'logs',
        'templates',
        'static/css',
        'static/js',
        'backups'
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"‚úÖ R√©pertoire {directory} cr√©√©")

def check_files():
    """V√©rifie la pr√©sence des fichiers essentiels"""
    print("üîç V√©rification des fichiers...")
    
    required_files = [
        'web_interface.py',
        'templates/base.html',
        'templates/dashboard.html',
        'templates/index.html',
        'static/css/style.css',
        'static/js/app.js',
        'config.py',
        'scheduler.py'
    ]
    
    missing_files = []
    for file_path in required_files:
        if not Path(file_path).exists():
            missing_files.append(file_path)
    
    if missing_files:
        print("‚ùå Fichiers manquants:")
        for file_path in missing_files:
            print(f"   - {file_path}")
        return False
    
    print("‚úÖ Tous les fichiers sont pr√©sents")
    return True

def create_nginx_config(domain=None, port=5000):
    """Cr√©e une configuration Nginx"""
    if not domain:
        return None
    
    config = f"""
server {{
    listen 80;
    server_name {domain};
    
    location / {{
        proxy_pass http://127.0.0.1:{port};
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }}
    
    location /socket.io {{
        proxy_pass http://127.0.0.1:{port};
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }}
}}
"""
    
    config_path = f"nginx_{domain}.conf"
    with open(config_path, 'w') as f:
        f.write(config)
    
    print(f"‚úÖ Configuration Nginx cr√©√©e: {config_path}")
    return config_path

def create_systemd_service(user=None, working_dir=None, port=5000):
    """Cr√©e un service systemd"""
    if not user or not working_dir:
        return None
    
    service_content = f"""[Unit]
Description=Interface Web Automatisation Aircall
After=network.target
Wants=network.target

[Service]
Type=simple
User={user}
Group={user}
WorkingDirectory={working_dir}
ExecStart={sys.executable} {working_dir}/web_interface.py
ExecReload=/bin/kill -HUP $MAINPID
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal
SyslogIdentifier=aircall-web-interface
Environment=PYTHONPATH={working_dir}
Environment=PYTHONUNBUFFERED=1
Environment=PORT={port}
Environment=HOST=127.0.0.1
NoNewPrivileges=true
PrivateTmp=true
ProtectSystem=strict
ProtectHome=true
ReadWritePaths={working_dir}/logs

[Install]
WantedBy=multi-user.target
"""
    
    service_path = "aircall-web-interface.service"
    with open(service_path, 'w') as f:
        f.write(service_content)
    
    print(f"‚úÖ Service systemd cr√©√©: {service_path}")
    return service_path

def create_docker_compose(port=5000):
    """Cr√©e un fichier docker-compose.yml"""
    compose_content = f"""version: '3.8'

services:
  aircall-web-interface:
    build: .
    ports:
      - "{port}:5000"
    volumes:
      - ./logs:/app/logs
      - ./config.py:/app/config.py
    environment:
      - HOST=0.0.0.0
      - PORT=5000
      - DEBUG=False
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
"""
    
    with open("docker-compose.yml", 'w') as f:
        f.write(compose_content)
    
    print("‚úÖ Docker Compose cr√©√©")

def create_dockerfile():
    """Cr√©e un Dockerfile"""
    dockerfile_content = """FROM python:3.9-slim

WORKDIR /app

# Installation des d√©pendances syst√®me
RUN apt-get update && apt-get install -y \\
    curl \\
    && rm -rf /var/lib/apt/lists/*

# Copie des fichiers de d√©pendances
COPY requirements.txt .

# Installation des d√©pendances Python
RUN pip install --no-cache-dir -r requirements.txt

# Copie du code source
COPY . .

# Cr√©ation des r√©pertoires n√©cessaires
RUN mkdir -p logs

# Exposition du port
EXPOSE 5000

# Commande de d√©marrage
CMD ["python", "web_interface.py"]
"""
    
    with open("Dockerfile", 'w') as f:
        f.write(dockerfile_content)
    
    print("‚úÖ Dockerfile cr√©√©")

def create_environment_file(port=5000, debug=False):
    """Cr√©e un fichier .env"""
    env_content = f"""# Configuration de l'interface web
HOST=0.0.0.0
PORT={port}
DEBUG={str(debug).lower()}

# Configuration de la base de donn√©es (si applicable)
# DATABASE_URL=sqlite:///automation.db

# Configuration de s√©curit√©
SECRET_KEY=your_secret_key_here_change_in_production
"""
    
    with open(".env", 'w') as f:
        f.write(env_content)
    
    print("‚úÖ Fichier .env cr√©√©")

def create_startup_script():
    """Cr√©e un script de d√©marrage"""
    script_content = """#!/bin/bash

# Script de d√©marrage de l'interface web d'automatisation
# Usage: ./start_web_interface.sh [--port PORT] [--host HOST] [--debug]

set -e

# Variables par d√©faut
PORT=${PORT:-5000}
HOST=${HOST:-0.0.0.0}
DEBUG=${DEBUG:-false}

# Parsing des arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --port)
            PORT="$2"
            shift 2
            ;;
        --host)
            HOST="$2"
            shift 2
            ;;
        --debug)
            DEBUG="true"
            shift
            ;;
        *)
            echo "Usage: $0 [--port PORT] [--host HOST] [--debug]"
            exit 1
            ;;
    esac
done

echo "üöÄ D√©marrage de l'interface web d'automatisation..."
echo "üìç Port: $PORT"
echo "üåê Host: $HOST"
echo "üêõ Debug: $DEBUG"

# V√©rification de Python
if ! command -v python3 &> /dev/null; then
    echo "‚ùå Python 3 non trouv√©"
    exit 1
fi

# V√©rification des d√©pendances
echo "üì¶ V√©rification des d√©pendances..."
python3 -c "import flask, flask_socketio, schedule" 2>/dev/null || {
    echo "üì¶ Installation des d√©pendances..."
    pip3 install -r requirements.txt
}

# D√©marrage de l'interface
export PORT=$PORT
export HOST=$HOST
export DEBUG=$DEBUG

echo "‚úÖ D√©marrage sur http://$HOST:$PORT"
python3 web_interface.py
"""
    
    with open("start_web_interface.sh", 'w') as f:
        f.write(script_content)
    
    # Rendre le script ex√©cutable
    os.chmod("start_web_interface.sh", 0o755)
    
    print("‚úÖ Script de d√©marrage cr√©√©")

def create_health_check():
    """Cr√©e un script de v√©rification de sant√©"""
    health_content = '''#!/usr/bin/env python3
# Script de v√©rification de sant√© pour l'interface web
import requests
import sys
import time

def check_health(url, timeout=30):
    """V√©rifie la sant√© de l'interface web"""
    try:
        response = requests.get(f"{url}/api/status", timeout=timeout)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Interface web op√©rationnelle")
            print(f"   Statut: {data.get('status', 'inconnu')}")
            print(f"   Total ex√©cutions: {data.get('stats', {}).get('total_runs', 0)}")
            return True
        else:
            print(f"‚ùå Interface web r√©pond avec le code {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False

if __name__ == "__main__":
    url = sys.argv[1] if len(sys.argv) > 1 else "http://localhost:5000"
    print(f"üîç V√©rification de la sant√© de l'interface web sur {url}")
    
    if check_health(url):
        sys.exit(0)
    else:
        sys.exit(1)
'''
    
    with open("health_check.py", 'w') as f:
        f.write(health_content)
    
    print("‚úÖ Script de v√©rification de sant√© cr√©√©")

def create_backup():
    """Cr√©e une sauvegarde de la configuration actuelle"""
    print("üíæ Cr√©ation d'une sauvegarde...")
    
    backup_dir = Path("backups") / f"backup_{int(time.time())}"
    backup_dir.mkdir(parents=True, exist_ok=True)
    
    # Fichiers √† sauvegarder
    files_to_backup = [
        'config.py',
        'web_interface.py',
        'scheduler.py',
        'requirements.txt'
    ]
    
    for file_path in files_to_backup:
        if Path(file_path).exists():
            shutil.copy2(file_path, backup_dir)
    
    print(f"‚úÖ Sauvegarde cr√©√©e dans {backup_dir}")

def main():
    """Fonction principale"""
    parser = argparse.ArgumentParser(description="D√©ploiement de l'interface web d'automatisation")
    parser.add_argument("--port", type=int, default=5000, help="Port de l'interface web")
    parser.add_argument("--host", default="0.0.0.0", help="Host de l'interface web")
    parser.add_argument("--domain", help="Nom de domaine pour Nginx")
    parser.add_argument("--user", help="Utilisateur pour systemd")
    parser.add_argument("--docker", action="store_true", help="Cr√©er les fichiers Docker")
    parser.add_argument("--nginx", action="store_true", help="Cr√©er la configuration Nginx")
    parser.add_argument("--systemd", action="store_true", help="Cr√©er le service systemd")
    parser.add_argument("--backup", action="store_true", help="Cr√©er une sauvegarde")
    
    args = parser.parse_args()
    
    print("üöÄ D√©ploiement de l'interface web d'automatisation")
    print("=" * 50)
    
    # V√©rifications pr√©liminaires
    check_python_version()
    check_dependencies()
    
    # Cr√©ation des r√©pertoires
    create_directories()
    
    # V√©rification des fichiers
    if not check_files():
        print("‚ùå D√©ploiement interrompu - fichiers manquants")
        sys.exit(1)
    
    # Cr√©ation des fichiers de configuration
    create_environment_file(args.port, debug=False)
    create_startup_script()
    create_health_check()
    
    # Cr√©ation des fichiers optionnels
    if args.docker:
        create_dockerfile()
        create_docker_compose(args.port)
    
    if args.nginx and args.domain:
        create_nginx_config(args.domain, args.port)
    
    if args.systemd and args.user:
        working_dir = os.getcwd()
        create_systemd_service(args.user, working_dir, args.port)
    
    if args.backup:
        create_backup()
    
    print("\n" + "=" * 50)
    print("‚úÖ D√©ploiement termin√© avec succ√®s !")
    print("\nüìã Prochaines √©tapes:")
    print("1. V√©rifiez la configuration dans le fichier .env")
    print("2. Testez l'interface: python3 web_interface.py")
    print("3. Acc√©dez √† l'interface: http://localhost:" + str(args.port))
    
    if args.docker:
        print("4. Pour Docker: docker-compose up -d")
    
    if args.systemd and args.user:
        print("5. Pour systemd: sudo systemctl enable aircall-web-interface.service")
    
    print("\nüîß Commandes utiles:")
    print(f"   D√©marrage: ./start_web_interface.sh --port {args.port}")
    print("   V√©rification: python3 health_check.py")
    print("   Logs: tail -f logs/web_interface.log")

if __name__ == "__main__":
    main()
