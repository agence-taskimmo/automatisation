#!/usr/bin/env python3
"""
Script de d√©marrage automatique des automatisations
Peut √™tre utilis√© avec cron, systemd ou en tant que service Windows
"""

import os
import sys
import time
import logging
from pathlib import Path
from datetime import datetime

# Ajouter le r√©pertoire courant au path Python
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from config import validate_config
from scheduler import AutomationScheduler

def setup_logging():
    """Configure le syst√®me de logging"""
    log_dir = Path("logs")
    log_dir.mkdir(exist_ok=True)
    
    # Fichier de log avec date
    log_file = log_dir / f"automation_{datetime.now().strftime('%Y%m%d')}.log"
    
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(log_file),
            logging.StreamHandler()
        ]
    )
    
    return logging.getLogger(__name__)

def check_environment():
    """V√©rifie l'environnement d'ex√©cution"""
    logger = logging.getLogger(__name__)
    
    # V√©rifier Python
    logger.info(f"üêç Version Python: {sys.version}")
    
    # V√©rifier le r√©pertoire de travail
    work_dir = Path.cwd()
    logger.info(f"üìÅ R√©pertoire de travail: {work_dir}")
    
    # V√©rifier les fichiers essentiels
    essential_files = [
        'config.py',
        'scheduler.py',
        'aircall_monday_integration_v2.py',
        'create_tasks_from_actions.py',
        'smart_task_assigner.py'
    ]
    
    missing_files = []
    for file in essential_files:
        if not Path(file).exists():
            missing_files.append(file)
    
    if missing_files:
        logger.error(f"‚ùå Fichiers manquants: {missing_files}")
        return False
    
    logger.info("‚úÖ Environnement v√©rifi√©")
    return True

def start_as_service():
    """D√©marre l'automatisation en tant que service"""
    logger = logging.getLogger(__name__)
    
    logger.info("üöÄ D√©marrage du service d'automatisation")
    
    try:
        # V√©rifier la configuration
        if not validate_config():
            logger.error("‚ùå Configuration invalide")
            return False
        
        # V√©rifier l'environnement
        if not check_environment():
            logger.error("‚ùå Environnement invalide")
            return False
        
        # D√©marrer le planificateur
        scheduler = AutomationScheduler()
        logger.info("‚úÖ Planificateur d√©marr√©")
        
        # D√©marrer en continu
        scheduler.start()
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Arr√™t du service (Ctrl+C)")
    except Exception as e:
        logger.error(f"‚ùå Erreur dans le service: {str(e)}")
        return False
    
    return True

def start_scheduled():
    """D√©marre l'automatisation avec planification"""
    logger = logging.getLogger(__name__)
    
    logger.info("‚è∞ D√©marrage de l'automatisation planifi√©e")
    
    try:
        # V√©rifier la configuration
        if not validate_config():
            logger.error("‚ùå Configuration invalide")
            return False
        
        # V√©rifier l'environnement
        if not check_environment():
            logger.error("‚ùå Environnement invalide")
            return False
        
        # D√©marrer le planificateur
        scheduler = AutomationScheduler()
        logger.info("‚úÖ Planificateur d√©marr√©")
        
        # Configurer la planification
        scheduler.setup_schedule()
        logger.info("‚úÖ Planification configur√©e")
        
        # D√©marrer en continu
        scheduler.start()
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Arr√™t de l'automatisation (Ctrl+C)")
    except Exception as e:
        logger.error(f"‚ùå Erreur dans l'automatisation: {str(e)}")
        return False
    
    return True

def run_once(task_type: str = "full"):
    """Ex√©cute une t√¢che une seule fois"""
    logger = logging.getLogger(__name__)
    
    logger.info(f"üéØ Ex√©cution unique: {task_type}")
    
    try:
        # V√©rifier la configuration
        if not validate_config():
            logger.error("‚ùå Configuration invalide")
            return False
        
        # V√©rifier l'environnement
        if not check_environment():
            logger.error("‚ùå Environnement invalide")
            return False
        
        # Ex√©cuter la t√¢che
        scheduler = AutomationScheduler()
        success = scheduler.run_once(task_type)
        
        if success:
            logger.info("‚úÖ T√¢che ex√©cut√©e avec succ√®s")
        else:
            logger.error("‚ùå T√¢che √©chou√©e")
        
        return success
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'ex√©cution: {str(e)}")
        return False

def main():
    """Fonction principale"""
    import argparse
    
    parser = argparse.ArgumentParser(description='D√©marrage automatique des automatisations')
    parser.add_argument('--service', action='store_true', 
                       help='D√©marrer en tant que service (mode continu)')
    parser.add_argument('--scheduled', action='store_true',
                       help='D√©marrer avec planification automatique')
    parser.add_argument('--once', choices=['full', 'sync', 'tasks', 'assign', 'link', 'relations'],
                       help='Ex√©cuter une t√¢che une seule fois')
    parser.add_argument('--log-level', choices=['DEBUG', 'INFO', 'WARNING', 'ERROR'],
                       default='INFO', help='Niveau de log')
    parser.add_argument('--daemon', action='store_true',
                       help='Mode daemon (d√©tach√© du terminal)')
    
    args = parser.parse_args()
    
    # Configuration du logging
    logging.getLogger().setLevel(getattr(logging, args.log_level))
    logger = setup_logging()
    
    # Mode daemon
    if args.daemon:
        logger.info("üëª Mode daemon activ√©")
        # D√©tacher du terminal
        try:
            pid = os.fork()
            if pid > 0:
                # Processus parent
                logger.info(f"üöÄ Service d√©marr√© avec PID: {pid}")
                sys.exit(0)
        except OSError:
            logger.error("‚ùå Impossible de d√©marrer en mode daemon")
            sys.exit(1)
    
    logger.info("ü§ñ D√©marrage du syst√®me d'automatisation")
    logger.info(f"üìÖ {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    
    try:
        if args.once:
            # Ex√©cution unique
            success = run_once(args.once)
            sys.exit(0 if success else 1)
        elif args.service:
            # Mode service
            success = start_as_service()
            sys.exit(0 if success else 1)
        elif args.scheduled:
            # Mode planifi√©
            success = start_scheduled()
            sys.exit(0 if success else 1)
        else:
            # Mode par d√©faut (planifi√©)
            logger.info("‚è∞ Mode par d√©faut: planification automatique")
            success = start_scheduled()
            sys.exit(0 if success else 1)
            
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Arr√™t demand√© par l'utilisateur")
        sys.exit(0)
    except Exception as e:
        logger.error(f"‚ùå Erreur fatale: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()
